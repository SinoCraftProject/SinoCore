plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '0.12.0-SNAPSHOT' apply false
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'java'
apply plugin: 'architectury-plugin'   // Parchment mappings.
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
apply plugin: 'dev.architectury.loom'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    silentMojangMappingsLicense()

    forge {
        dataGen {
            mod 'sinocore'
        }
        mixinConfig "sinocore.mixins.json"
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

group = 'games.moegirl.sinocraft.sinocore' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'sinocore'
version = '1.18.2-1.3.0'

// qyl27: for developing and release.
if (System.getenv("JITPACK") == "true") {
    version += "-${System.getenv("VERSION")}"
}

var release = false
if (release || (project.hasProperty("SINOSERIES_RELEASE") && project.property("SINOSERIES_RELEASE") == 'true')) {
    version += '-release'
} else {
    version += '-dev'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

println("Building SinoCore. Ver: $version.")

sourceSets {
    api {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        java {
            outputDir = main.java.outputDir
        }
    }

    main {
        resources {
            // Include resources generated by data generators.
            srcDir 'src/generated/resources'
        }

        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE;
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    mavenCentral()

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:1.18.2"
    forge "net.minecraftforge:forge:1.18.2-40.1.0"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:2022.05.22@zip")
    }

    compileOnly 'cn.hutool:hutool-cron:5.8.4'
    forgeRuntimeLibrary 'cn.hutool:hutool-cron:5.8.4'

    modImplementation("mezz.jei:jei-1.18.2-forge:10.0.0.191")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "sinocore",
                "Specification-Vendor"    : "SinoCraft Project Team",
                "Specification-Version"   : "11",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MoeGirl Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "sinocore.mixins.json"
        ])
    }

    from(sourceSets.api.output)
}

classes.finalizedBy(shadowJar)

remapJar {
    dependsOn(shadowJar)
    inputFile.set(shadowJar.archiveFile)
    archiveClassifier.set('')
}

shadowJar {
    from(sourceSets.main.output)
    archiveClassifier.set('shaded')

    dependencies {
        include(dependency('cn.hutool:hutool-core:5.8.4'))
        include(dependency('cn.hutool:hutool-log:5.8.4'))
        include(dependency('cn.hutool:hutool-setting:5.8.4'))
        include(dependency('cn.hutool:hutool-cron:5.8.4'))

        exclude("forge-client-extra.jar")
    }

    relocate 'cn.hutool', 'libs.cn.hutool'
}

tasks.create('apiJar', Jar) {
    dependsOn(apiClasses)
    archiveClassifier.set('api')
    from(sourceSets.api.output)
    finalizedBy(remapJar)
}

tasks.create('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE;
    from(sourceSets.main.allJava)
    from(sourceSets.api.allJava)
}

tasks.create('apiSourcesJar', Jar) {
    archiveClassifier.set('api-sources')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE;
    from(sourceSets.api.allJava)
}

// run apiJar before build
tasks.build.dependsOn(tasks.apiJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact apiJar
            artifact sourcesJar
            artifact apiSourcesJar
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "file://${project.projectDir}/../mavenLocal"
        }
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

task injectString(type: Copy) {
    from ('src/main/java') {
        include '**/*.java'
        filter(ReplaceTokens, tokens: [version: project.version])
    }
    into "${buildDir}/generated/java"
}

// qyl27: It only works with main.
compileJava.source = "${buildDir}/generated/java"
compileJava.dependsOn injectString
